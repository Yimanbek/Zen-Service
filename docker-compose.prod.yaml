services:
  db:
    image: postgres:14
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_DB: ${NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/

  web:
    build: 
      context: .
      dockerfile: ./docker/dockerfile.prod
    depends_on:
      db:
        condition: service_healthy
    container_name: django-ZEN
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media

  migrations:
    build: 
      context: .
      dockerfile: ./docker/dockerfile.prod
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn app.wsgi:application --bind 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
    container_name: migrations
    restart: always

  test-db:
    image: postgres:14
    container_name: test_postgres_db
    restart: always
    env_file: 
      - .env 
    environment:
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_DB: ${TEST_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${TEST_DB_NAME}"]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - test_pgdata:/var/lib/postgresql/data

  test-runner:
    build: 
      context: .
      dockerfile: ./docker/dockerfile.prod
    command: >
      sh -c "pytest"
    depends_on:
      test-db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${TEST_DATABASE_URL}
    container_name: django-ZEN-Tests
    restart: on-failure

  nginx:
    image: nginx:latest
    container_name: nginx-prod
    restart: always
    depends_on:
      - web
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - web

volumes:
  pg_data:
  test_pgdata:
  static_volume:
  media_volume: